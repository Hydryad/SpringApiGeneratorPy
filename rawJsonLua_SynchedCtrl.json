{
    "batchcomplete": true,
    "query": {
        "normalized": [
            {
                "from": "Lua_SyncedCtrl",
                "fromencoded": false,
                "to": "Lua SyncedCtrl"
            }
        ],
        "pages": [
            {
                "ns": 0,
                "pageid": 2403,
                "revisions": [
                    {
                        "content": "[[Engine_Development|Development]] < [[Lua_Scripting|Lua Scripting]] < {{FULLPAGENAME}}\n\n= Game End =\n\n{{LuaCallout\n|prefix = Spring.\n|name = KillTeam\n|arg1 = {{type|number}} teamID\n|arg2 = \n|arg3 = \n|arg4 =\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|83.0}}<br> Will declare a team to be dead ( no further orders can be assigned to such teams's units ), Gaia team cannot be killed.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GameOver\n|arg1 = {{type|number}} allyTeamID1\n|arg2 = {{type|number}} allyTeamID2\n|arg3 = ...\n|arg4 =\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|83.0}}<br> Will declare game over, a list of winning allyteams can be passed, if undecided ( like when dropped from the host ) it should be empty ( no winner ), in the case of a draw with multiple winners, all should be listed.\n}}\n\n= RulesParams =\n<span class=warning>String values are new since 95.0. Attention: Numeric paramValues in quotes will be converted to number.</span>\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitRulesParam\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} paramName\n|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} \n|arg4 = {{type|table}} losAccess {{rbracket}}\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = <span class=note>Possible keys for the losAccess table are:\n    `private` : only readable by the ally (default)\n    `allied`  : readable by ally + ingame allied\n    `inlos`   : readable if the unit is in LOS\n    `inradar` : readable if the unit is in AirLOS\n    `public`  : readable by all\n   note: if one condition is fulfilled all beneath it are too (e.g. if an unit is in LOS it<br/>     can read params with `inradar=true` even if the param has `inlos=false`)\n   note2: all GameRulesParam are public, TeamRulesParams can just be `private`,`allied`<br/>     and/or `public`\n   note3: You can read RulesParams from '''any''' Lua enviroments! With those losAccess<br/>     policies you can limit their access.</span>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureRulesParam\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|string}} paramName\n|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} \n|arg4 = {{type|table}} losAccess {{rbracket}}\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = <span class=warning>New since 102.0.</span><br>See above for further documentation of losAccess.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetTeamRulesParam\n|arg1 = {{type|number}} teamID\n|arg2 = {{type|string}} paramName\n|arg3 = {{type|number{{pipe}}string}} paramValue {{bracket}} \n|arg4 = {{type|table}} losAccess {{rbracket}}\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = See above for further documentation of losAccess.\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetGameRulesParam\n|arg1 = {{type|string}} paramName\n|arg2 = {{type|number{{pipe}}string}} paramValue {{bracket}} \n|arg3 = {{type|table}} losAccess {{rbracket}}\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = See above for further documentation of losAccess.\n}}\n\n= Resources =\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddTeamResource\n|arg1 = {{type|number}} teamID\n|arg2 = {{type|string}} \"metal\" {{pipe}} \"energy\"\n|arg3 = {{type|number}} amount\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = Adds metal or energy resources to the specified team.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UseTeamResource\n|arg1 = {{type|number}} teamID\n|arg2 = {{type|string}} \"metal\" {{pipe}} \"energy\"\n|arg3 = {{type|number}} amount {{pipe}} { metal = {{type|number}} amount, energy = {{type|number}} amount }\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}} {{pipe}} {{type|bool}} hadEnough\n|info = Consumes metal and/or energy resources of the specified team.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetTeamResource\n|arg1 = {{type|number}} teamID\n|arg2 = {{type|string}} res\n|arg3 = {{type|number}} amount\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = Possible values for res are:<br>\"m\"  = metal<br>\"e\"  = energy<br>\"ms\"  = metal storage<br>\"es\"  = energy storage<br>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetTeamShareLevel\n|arg1 = {{type|number}} teamID\n|arg2 = {{type|string}} \"metal\" {{pipe}} \"energy\"\n|arg3 = {{type|number}} amount\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = Changes the resource amount for a team beyond which resources aren't stored but transferred to other allied teams if possible.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = ShareTeamResource\n|arg1 = {{type|number}} teamID_src\n|arg2 = {{type|number}} teamID_recv\n|arg3 = {{type|string}} \"metal\" {{pipe}} \"energy\"\n|arg4 = {{type|number}} amount\n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = Transfers resources between two teams.\n}}\n\n= Teams =\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetAlly\n|arg1 = {{type|number}} firstAllyTeamID\n|arg2 = {{type|number}} secondAllyTeamID\n|arg3 = {{type|bool}} ally\n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|98.0}}<br>Changes the value of the (one-sided) alliance between: firstAllyTeamID -> secondAllyTeamID.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AssignPlayerToTeam\n|arg1 = {{type|number}} playerID\n|arg2 = {{type|number}} teamID\n|arg3 = \n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|98.0}}<br>Assigns a player to a team.\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetGlobalLos\n|arg1 = {{type|number}} allyTeamID\n|arg2 = {{type|bool}} globallos \n|arg3 = \n|arg4 = \n|arg5 =\n|arg6 =\n|arg7 =\n|arg8 =\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|101.0}}<br>Changes access to global line of sight for a team and its allies.\n}}\n\n= Unit Handling =\n\n{{LuaCallout\n|prefix = Spring.\n|name = CreateUnit\n|arg1 = {{type|string}} \"defName\" {{pipe}} {{type|number }} unitDefID\n|arg2 = {{type|number}} x\n|arg3 = {{type|number}} y\n|arg4 = {{type|number}} z\n|arg5 = {{type|string}} \"facing\" {{pipe}} {{type|number }} facing \n|arg6 = {{type|number}} teamID {{bracket}}\n|arg7 = {{type|bool}} build = false {{bracket}} \n|arg8 = {{type|bool}} flattenGround = true {{bracket}} \n|arg9 = {{type|number}} builderID {{rbracket}}{{rbracket}}{{rbracket}} \n|return = {{type|number}} unitID {{pipe}} {{type|nil}} (meaning unit was not created)\n|info = Offmap positions are clamped! Use MoveCtrl to move to such positions.<br>Possible values for facing are:<br>\"south\" {{pipe}} \"s\" {{pipe}} 0<br>\"east\"  {{pipe}} \"e\" {{pipe}} 1<br>\"north\" {{pipe}} \"n\" {{pipe}} 2<br>\"west\"  {{pipe}} \"w\" {{pipe}} 3<br><br>If build is true, the unit is created in \"being built\" state with buildProgress = 0<br>unitID and builderID are {{new|92.0}}, the former allowing to spawn a unit with a specific ID.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = DestroyUnit\n|arg1 = {{type|number}} unitID {{bracket}} \n|arg2 = {{type|bool}} selfd = false {{bracket}} \n|arg3 = {{type|bool}} reclaimed = false {{bracket}} \n|arg4 = {{type|number}} attackerID {{rbracket}}{{rbracket}}{{rbracket}} \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = selfd := Makes the unit act like it self-destructed.<br>reclaimed := Don't show any DeathSequences, don't leave a wreckage. This does not give back the resources to the team!\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = TransferUnit\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} newTeamID {{bracket}} \n|arg3 = {{type|bool}} given = true {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = If given=false, the unit is captured.\n}}\n\n== Unit Control ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitCosts\n|arg1 = {{type|number}} unitID \n|arg2 = { {{bracket}} buildTime = {{type|number}} amount {{rbracket}}\n|arg3 = {{bracket}} metalCost = {{type|number}} amount  {{rbracket}}\n|arg4 = {{bracket}} energyCost = {{type|number}} amount {{rbracket}} }\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitTooltip\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|string}} \"tooltip\"\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitHealth\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|number}} health {{pipe}} { {{bracket}} health = {{type|number}} health {{rbracket}}\n|arg3 = {{bracket}} capture  = {{type|number}} capture  {{rbracket}}\n|arg4 = {{bracket}} paralyze = {{type|number}} paralyze {{rbracket}}\n|arg5 = {{bracket}} build    = {{type|number}} build {{rbracket}} }\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMaxHealth\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|number}} maxHealth \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddUnitDamage\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|number}} damage {{bracket}}\n|arg3 = {{type|number}} paralyze = 0 {{bracket}}\n|arg4 = {{type|number}} attackerID = -1 {{bracket}}\n|arg5 = {{type|number}} weaponID = -1 {{bracket}}\n|arg6 = {{type|number}} impulse_x {{bracket}}\n|arg7 = {{type|number}} impulse_y {{bracket}}\n|arg8 = {{type|number}} impulse_z {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}\n|arg9 = \n|return = {{type|nil}}\n|info = The number in the paralyze parameter equals to the paralyzetime in the WeaponDef.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitStockpile\n|arg1 = {{type|number}} unitID {{bracket}}\n|arg2 = {{type|number}} stockpile {{bracket}}\n|arg3 = {{type|number}} buildPercent {{rbracket}}{{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitExperience\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} experience \n|arg3 = {{type|number}} buildPercent\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFuel\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} fuel \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|101.0}}\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitCrashing\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} crashing \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = {{new|83.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitLineage\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} teamID {{bracket}}\n|arg3 = {{type|bool}} isRoot {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|83.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitNeutral\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} neutral\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|83.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitTarget\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} x {{pipe}} {{type|nil}} \n|arg3 = {{type|number}} y \n|arg4 = {{type|number}} z {{bracket}}\n|arg5 = {{type|bool}} dgun = false {{bracket}}\n|arg6 = {{type|bool}} userTarget = false {{bracket}}\n|arg7 = {{type|number}} weaponNum = -1 {{rbracket}}{{rbracket}}{{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info =\n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitTarget\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} enemyUnitID {{pipe}} {{type|nil}} {{bracket}}\n|arg3 = {{type|bool}} dgun = false {{bracket}}\n|arg4 = {{type|bool}} userTarget = false {{bracket}}\n|arg5 = {{type|number}} weaponNum = -1 {{rbracket}}{{rbracket}}{{rbracket}}\n|arg6 =\n|arg7 =\n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = Defines a unit's target. Nil as 2nd argument drops the unit's current target.<br><span class=\"warning\">UserTarget & success new in version 95.0, setting nil target new in version 99.0, weaponNum new in version 102.0.</span>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMaxRange\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} maxRange\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 =\n|arg7 =\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMass\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} mass \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 =\n|arg7 =\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitBlocking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} isblocking\n|arg3 = {{type|bool}} isSolidObjectCollidable\n|arg4 = {{type|bool}} isProjectileCollidable\n|arg5 = {{type|bool}} isRaySegmentCollidable\n|arg6 = {{type|bool}} crushable\n|arg7 = {{type|bool}} blockEnemyPushing\n|arg8 = {{type|bool}} blockHeightChanges\n|arg9 = \n|return = {{type|nil}}\n|info = {{new|95.0}}<br>Changed parameters.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMetalExtraction\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} depth {{bracket}}\n|arg3 = {{type|number}} range {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 =\n|arg7 =\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Parameter \"depth\" corresponds to metal extraction rate. Range value is similar to \"extractsMetal\" in unitDefs.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitBuildSpeed\n|arg1 = {{type|number}} builderID\n|arg2 = {{type|number}} buildSpeed {{bracket}}\n|arg3 = {{type|number}} repairSpeed {{bracket}}\n|arg4 = {{type|number}} reclaimSpeed{{bracket}}\n|arg5 = {{type|number}} resurrectSpeed {{bracket}}\n|arg6 = {{type|number}} captureSpeed {{bracket}}\n|arg7 = {{type|number}} terraformSpeed {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitNanoPieces\n|arg1 = {{type|number}} builderID\n|arg2 = {{type|table}} pieces\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|92.0}}<br>This saves a lot of engine calls, by replacing: function script.QueryNanoPiece() return currentpiece end<br>Use it!\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UnitAttach\n|arg1 = {{type|number}} transporterID\n|arg2 = {{type|number}} passengerID\n|arg3 = {{type|number}} pieceNum \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UnitDetach\n|arg1 = {{type|number}} passengerID \n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UnitDetachFromAir\n|arg1 = {{type|number}} passengerID \n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitLoadingTransport\n|arg1 = {{type|number}} passengerID \n|arg2 = {{type|number}} transportID \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}<br>Disables collisions between the two units to allow colvol intersection during the approach.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPieceParent\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} AlteredPiece\n|arg3 = {{type|number}} ParentPiece \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}<br>Changes the pieces hierarchy of a unit by attaching a piece to a new parent.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPieceMatrix\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} pieceNum\n|arg3 = {{type|table }} matrix \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|104.0}}<br>Sets the local (i.e. parent-relative) matrix of the given piece if any of the first three elements are non-zero, and also blocks all script animations from modifying it until {0, 0, 0} is passed (matrix should be an array of 16 floats, but is not otherwise sanity-checked).\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitArmored\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} armored {{bracket}}\n|arg3 = {{type|number}} armorMultiple {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = <span class=\"warning\">armorMultiple new in version 0.83.x</span>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitShieldState\n|arg1 = {{type|number}} unitID {{bracket}}\n|arg2 = {{type|number}} weaponID = -1 {{bracket}}\n|arg3 = {{type|bool}} enabled {{bracket}}\n|arg4 = {{type|number}} power {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFlanking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} \"mode\"\n|arg3 = {{type|number }} mode \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFlanking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} \"moveFactor\"\n|arg3 = {{type|number }} factor\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFlanking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} \"minDamage\"\n|arg3 = {{type|number }} minDamage \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFlanking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} \"maxDamage\"\n|arg3 = {{type|number }} maxDamage \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitFlanking\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} \"dir\"\n|arg3 = {{type|number }} x\n|arg4 = {{type|number }} y\n|arg5 = {{type|number }} z\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitWeaponState\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum\n|arg3 = {{type|table }} states \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitWeaponState\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum\n|arg3 = {{type|string }} key\n|arg4 = {{type|number}} value\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n<span class=\"note\">Format of the states table:\n    {\n      [\"reloadState\"     = number value,]\n      [\"reloadFrame\"     = number value,] (synonym for reloadState!)\n      [\"reloadTime\"      = number value,]\n      [\"accuracy\"        = number value,]\n      [\"sprayAngle\"      = number value,]\n      [\"range\"           = number value,] (*)\n      [\"projectileSpeed\" = number value,]\n      [\"burst\"           = number value,]\n      [\"burstRate\"       = number value,]\n      [\"projectiles\"     = number value,]\n      [\"salvoLeft\"       = number value,]\n      [\"nextSalvo\"       = number value,]\n      [\"aimReady\"        = number value,] (<>0.0f := true)\n    }\n  (*) if you change the range of a weapon with dynamic damage\n  make sure you use SetUnitWeaponDamages to change dynDamageRange as well.\n  </span>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitWeaponDamages\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum {{pipe}} {{type|string}} \"selfDestruct\" {{pipe}} {{type|string}} \"explode\"\n|arg3 = {{type|table}} damages \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitWeaponDamages\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum {{pipe}} {{type|string}} \"selfDestruct\" {{pipe}} {{type|string}} \"explode\"\n|arg3 = {{type|string}} key\n|arg4 = {{type|number}} value\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n<span class=\"note\">Format of the damages table:\n   {\n      [\"paralyzeDamageTime\" = number value,]  \n      [\"impulseFactor\"      = number value,]\n      [\"impulseBoost\"       = number value,]\n      [\"craterMult\"         = number value,]\n      [\"craterBoost\"        = number value,]\n      [\"dynDamageExp\"       = number value,]\n      [\"dynDamageMin\"       = number value,]\n      [\"dynDamageRange\"     = number value,]\n      [\"dynDamageInverted\"  = number value,] (<>0.0f := true)\n      [\"craterAreaOfEffect\" = number value,]\n      [\"damageAreaOfEffect\" = number value,]\n      [\"edgeEffectiveness\"  = number value,]\n      [\"explosionSpeed\"     = number value,]\n      [number armorType     = number value,] (changes the damage against this armor type)\n    }\n  </span>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitCollisionVolumeData\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ\n|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ\n|arg4 = {{type|number}} vType\n|arg5 = {{type|number}} tType\n|arg6 = {{type|number}} Axis\n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n  <span class=\"note\">enum COLVOL_TYPES {\n      COLVOL_TYPE_DISABLED = -1,\n      COLVOL_TYPE_ELLIPSOID = 0,\n      COLVOL_TYPE_CYLINDER,\n      COLVOL_TYPE_BOX,\n      COLVOL_TYPE_SPHERE,\n      COLVOL_NUM_TYPES       // number of non-disabled collision volume types\n    };\n    enum COLVOL_TESTS {\n      COLVOL_TEST_DISC = 0,\n      COLVOL_TEST_CONT = 1,\n      COLVOL_NUM_TESTS = 2   // number of tests\n    };\n    enum COLVOL_AXES {\n      COLVOL_AXIS_X   = 0,\n      COLVOL_AXIS_Y   = 1,\n      COLVOL_AXIS_Z   = 2,\n      COLVOL_NUM_AXES = 3    // number of collision volume axes\n    };\n  </span>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPieceCollisionVolumeData\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} pieceIndex\n|arg3 = {{type|bool}} enable\n|arg4 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ\n|arg5 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ {{bracket}}\n|arg6 = {{type|number}} volumeType {{bracket}}\n|arg7 = {{type|number}} primaryAxis {{rbracket}}{{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = As of 101.0 this is 1-based piece index argument (was 0-based).\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitTravel\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} travel {{bracket}}\n|arg3 = {{type|number}} travelPeriod {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMoveGoal\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} goalX, {{type|number}} goalY, {{type|number}} goalZ {{bracket}}\n|arg3 = {{type|number}} goalRadius {{bracket}}\n|arg4 = {{type|number}} moveSpeed {{bracket}}\n|arg5 = {{type|bool}} moveRaw {{rbracket}}{{rbracket}}{{rbracket}}\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = <span class=\"note\">Used by default commands to get in build-, attackrange etc.</span><br>{{new|98.0}} <span class=\"note\">moveRaw: [http://springrts.com/mantis/view.php?id=4412 allow unit to dumbly move to a coordinate without calculating path.]</span>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitLandGoal\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} goalX, {{type|number}} goalY, {{type|number}} goalZ {{bracket}}\n|arg3 = {{type|number}} goalRadius {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}<br>Used in conjunction with {{name|Spring.UnitAttach}} et al. to re-implement old airbase & fuel system in Lua.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = ClearUnitGoal\n|arg1 = {{type|number}} unitID\n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|102.0}}\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPhysics\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ\n|arg3 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ\n|arg4 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ\n|arg5 = {{type|number}} dragX, {{type|number}} dragY, {{type|number}} dragZ\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = <span class=\"warning\">Drag new in version 95.0</span>\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPosition\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} x\n|arg3 = {{type|number}} z {{bracket}}\n|arg4 = {{type|bool}} alwaysAboveSea {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitDirection\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} x\n|arg3 = {{type|number}} y\n|arg4 = {{type|number}} z\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|90.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitVelocity\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} velX\n|arg3 = {{type|number}} velY\n|arg4 = {{type|number}} velZ\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitRotation\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} yaw\n|arg3 = {{type|number}} pitch\n|arg4 = {{type|number}} roll\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddUnitImpulse\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} x\n|arg3 = {{type|number}} y\n|arg4 = {{type|number}} z {{bracket}}\n|arg5 = {{type|number}} decayRate {{rbracket}}\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddUnitSeismicPing\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} pingSize \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetGroundMoveTypeData\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|table}} properties\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Use this function to control movement properties for ground units. Known properties : maxSpeed, maxWantedSpeed, turnRate, ... (TODO fix/update)\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetAirMoveTypeData\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|table}} properties\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Use this function to control movement properties for non-gunship air units. Known properties : maxSpeed, maxWantedSpeed, ... (TODO fix/update)\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetGunshipMoveTypeData\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|table}} properties\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Use this function to control movement properties for air gunships. Known properties : maxSpeed, maxWantedSpeed, turnRate, ... (TODO fix/update)\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = RemoveBuildingDecal\n|arg1 = {{type|number}} unitID\n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitMidAndAimPos\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} mpX, {{type|number}} mpY, {{type|number}} mpZ\n|arg3 = {{type|number}} apX, {{type|number}} apY, {{type|number}} apZ {{bracket}}\n|arg4 = {{type|bool}} relative {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = {{new|89.0}}<br>mpx, mpy, mpz: New middle position of unit<br>apx, apy, apz: New position that enemies aim at on this unit<br>relative: Are the new coordinates relative to world (false) or unit (true) coordinates? Also, note that apy is inverted!\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitRadiusAndHeight\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} radius\n|arg3 = {{type|number}} height\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = {{new|89.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UnitWeaponFire\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponID \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UnitWeaponHoldFire\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponID \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n== Unit LOS ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitCloak\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} cloaked {{pipe}} {{type|number}} scriptCloak {{bracket}}\n|arg3 = {{type|bool}} decloakAbs {{pipe}} {{type|number}} decloakDistance {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = If the 2nd argument is a number, the value works like this:<br>1:=normal cloak<br>2:=for free cloak (cost no E)<br>3:=for free + no decloaking (except the unit is stunned)<br>4:=ultimative cloak (no ecost, no decloaking, no stunned decloak)<br><br>The decloak distance is only changed:<br>- if the 3th argument is a number or a boolean.<br>- if the boolean is false it takes the default decloak distance for that unitdef,<br>- if the boolean is true it takes the absolute value of it.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitSonarStealth\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} sonarStealth \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitStealth\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} stealth \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitAlwaysVisible\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|bool}} alwaysVisible \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitLosMask\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} allyTeam\n|arg3 = {{type|number}} los  {{pipe}} {{type|table }} losTypes \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = The 3rd argument is either the bit-and combination of the following numbers:<br>LOS_INLOS     = 1<br>LOS_INRADAR   = 2<br>LOS_PREVLOS   = 4<br>LOS_CONTRADAR = 8<br><br>or a table of the following form:<br>losTypes = {<br>[los = boolean,]<br>[radar = boolean,]<br>[prevLos = boolean,]<br>[contRadar = boolean]<br>}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitLosState\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} allyTeam\n|arg3 = {{type|number}} los  {{pipe}} {{type|table }} losTypes \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = See above for more info on the arguments.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitSensorRadius\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string }} type\n|arg3 = {{type|number}} radius\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} newRadius\n|info = Type can be:<br>\"los\", \"airLos\", \"radar\", \"sonar\", \"seismic\", \"radarJammer\", \"sonarJammer\"\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetRadarErrorParams\n|arg1 = {{type|number}} allyTeamID\n|arg2 = {{type|number }} allyteamErrorSize {{bracket}}\n|arg3 = {{type|number}} baseErrorSize {{bracket}}\n|arg4 = {{type|number}} baseErrorMult {{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|95.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPosErrorParams\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} posErrorVector.x, {{type|number}} posErrorVector.y, {{type|number}} posErrorVector.z,\n|arg3 = {{type|number}} posErrorDelta.x, {{type|number}} number posErrorDelta.y, {{type|number}} posErrorDelta.z {{bracket}}\n|arg4 = {{type|number}} nextPosErrorUpdate {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|95.0}}\n}}\n\n== Unit Resourcing ==\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitResourcing\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string }} res\n|arg3 = {{type|number}} amount\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitResourcing\n|arg1 = {{type|number}} unitID\n|arg2 = { res = {{type|number}} amount, ... }\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  Possible values for res are: \"[u{{pipe}}c][u{{pipe}}m][m{{pipe}}e]\"<br>unconditional {{pipe}} conditional<br>use {{pipe}} make<br>metal {{pipe}} energy\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddUnitResource\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string }} \"m\" {{pipe}} \"e\"\n|arg3 = {{type|number}} amount \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = UseUnitResource\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string }} \"m\" {{pipe}} \"e\"\n|arg3 = {{type|number}} amount \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} okay\n|info =  \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = UseUnitResource\n|arg1 = {{type|number}} unitID\n|arg2 = { {{bracket}} \"m\" {{pipe}} \"metal\" {{pipe}} \"e\" {{pipe}} \"energy\" {{rbracket}} = amount, ... }\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} okay\n|info =  \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitHarvestStorage\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} metal\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  {{new|97.0}}<br>See also {{xtaglink|Gamedev:UnitDefs|harvestStorage}} UnitDef tag.\n}}\n\n= Feature Handling =\n\n{{LuaCallout\n|prefix = Spring.\n|name = CreateFeature\n|arg1 = {{type|string}} \"defName\" {{pipe}} {{type|number}} featureDefID\n|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}\n|arg3 = {{type|number}} heading {{bracket}}\n|arg4 = {{type|number}} AllyTeamID {{bracket}}\n|arg5 = {{type|number}} featureID {{rbracket}}{{rbracket}}{{rbracket}}\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|number}} featureID\n|info =  \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = DestroyFeature\n|arg1 = {{type|number}} featureDefID\n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = TransferFeature\n|arg1 = {{type|number}} featureDefID\n|arg2 = {{type|number}} teamID \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  \n}}\n\n== Feature Control ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureHealth\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} health\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureResources\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} metal\n|arg3 = {{type|number}} energy {{bracket}}\n|arg4 = {{type|number}} reclaimTime {{bracket}}\n|arg5 = {{type|number}} reclaimLeft {{rbracket}}{rbracket}}\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =  {{new|104.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureReclaim\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} reclaimLeft\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureResurrect\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} unitDefID {{pipe}} {{type|string}} unitDefName {{bracket}}\n|arg3 = {{type|number}} facing {{pipe}} {{type|string}} \"facing\" {{bracket}}\n|arg4 = {{type|number}} progress {{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|104.0}} Second param can now be a number id instead of a string name, this also allows cancelling ressurection by passing {{value|-1}}. The level of progress can now be set via the additional 4th param.<br>Possible values for facing are:<br>\"south\" {{pipe}} \"s\" {{pipe}} 0<br>\"east\"  {{pipe}} \"e\" {{pipe}} 1<br>\"north\" {{pipe}} \"n\" {{pipe}} 2<br>\"west\"  {{pipe}} \"w\" {{pipe}} 3\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeaturePosition\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} x, {{type|number}} y, {{type|number}} z {{bracket}}\n|arg3 = {{type|bool}} snapToGround {{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureDirection\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} dirX, {{type|number}} dirY, {{type|number}} dirZ\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureRotation\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureVelocity\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{New|95.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitPhysics\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} posX, {{type|number}} posY, {{type|number}} posZ\n|arg3 = {{type|number}} velX, {{type|number}} velY, {{type|number}} velZ\n|arg4 = {{type|number}} rotX, {{type|number}} rotY, {{type|number}} rotZ\n|arg5 = {{type|number}} dragX, {{type|number}} dragY, {{type|number}} dragZ\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{New|95.0}}\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureMoveCtrl\n|arg1 = {{type|number}} featureID {{bracket}}\n|arg2 = {{type|bool}} enable {{bracket}}\n|arg3 = {{type|number*}} args {{rbracket}}{{rbracket}}\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Use this callout to control feature movement. The number* arguments are parsed as follows and all optional:<br><br>If enable is true:<br>{{bracket}}, velVector(x,y,z) -- initial velocity for feature<br>{{bracket}}, accVector(x,y,z) -- acceleration added every frame{{rbracket}}{{rbracket}}<br><br>If enable is false:<br>{{bracket}}, velocityMask(x,y,z) -- dimensions in which velocity is allowed to build when not using MoveCtrl<br>{{bracket}},  impulseMask(x,y,z) -- dimensions in which impulse is allowed to apply when not using MoveCtrl<br>{{bracket}}, movementMask(x,y,z) -- dimensions in which feature is allowed to move when not using MoveCtrl{{rbracket}}{{rbracket}}{{rbracket}}<br><br>As of spring 103.0 it is necessary to unlock feature movement on x,z axis before changing feature physics. For example use \"Spring.SetFeatureMoveCtrl(featureID,false,1,1,1,1,1,1,1,1,1)\" to unlock all movement prior to making SetFeatureVelocity calls.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureNoSelect\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|bool}} noSelect \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureAlwaysVisible\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|bool}} enable\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureCollisionVolumeData\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ\n|arg3 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ\n|arg4 = {{type|number}} vType\n|arg5 = {{type|number}} tType\n|arg6 = {{type|number}} Axis\n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Check Spring.SetUnitCollisionVolumeData for further explanation of the arguments.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeaturePieceCollisionVolumeData\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} pieceIndex\n|arg3 = {{type|bool}} enable\n|arg4 = {{type|number}} scaleX, {{type|number}} scaleY, {{type|number}} scaleZ\n|arg5 = {{type|number}} offsetX, {{type|number}} offsetY, {{type|number}} offsetZ\n|arg6 = {{type|number}} Axis\n|arg7 = {{type|number}} volumeType {{bracket}}\n|arg8 = {{type|number}} primaryAxis {{rbracket}}\n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureMidAndAimPos\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} mpX, {{type|number}} mpY, {{type|number}} mpZ\n|arg3 = {{type|number}} apX, {{type|number}} apY, {{type|number}} apZ {{bracket}} \n|arg4 = {{type|bool}} relative\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = {{new|89.0}}<br>Check Spring.SetUnitMidAndAimPos for further explanation of the arguments.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureRadiusAndHeight\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} radius\n|arg3 = {{type|number}} height\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|bool}} success\n|info = {{new|89.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureMass\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|number}} mass\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetFeatureBlocking\n|arg1 = {{type|number}} featureID\n|arg2 = {{type|boolean}} isBlocking\n|arg3 = {{type|boolean}} isSolidObjectCollidable\n|arg4 = {{type|boolean}} isProjectileCollidable\n|arg5 = {{type|boolean}} isRaySegmentCollidable\n|arg6 = {{type|boolean}} crushable\n|arg7 = {{type|boolean}} blockEnemyPushing\n|arg8 = {{type|boolean}} blockHeightChanges\n|arg9 =\n|return = {{type|nil}}\n|info = {{new|95.0}}<br> Changed parameters.\n}}\n\n= Lua to COB =\n\n{{LuaCallout\n|prefix = Spring.\n|name = CallCOBScript\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} funcID {{pipe}} {{type|string}} funcName\n|arg3 = {{type|number}} retArgs\n|arg4 = COBArg1\n|arg5 = COBArg2\n|arg6 = ...\n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} returnValue, {{type|number}} retArg1, {{type|number}} retArg2, ...\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GetCOBScriptID\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|string}} funcName\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} funcID\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GetUnitCOBValue\n|arg1 = {{type|number}} unitID {{bracket}}\n|arg2 = {{type|bool}} splitData=false {{rbracket}}\n|arg3 = {{type|number}} COBValue {{bracket}}\n|arg4 = {{type|number}} param1 {{bracket}}\n|arg5 = {{type|number}} param2 {{bracket}}\n|arg6 = {{type|number}} param3 {{bracket}}\n|arg7 =  {{type|number}} param4 {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|number}} result {{pipe}} {{type|number}} result1, {{type|number}} result2\n|info = Note: Don't use Spring.{{bracket}}Get{{pipe}}Set{{rbracket}}UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!<br>You can find the possible values for `COBValue` in [[Lua_ConstCOB#Get.2FSet|Lua_ConstCOB]]. Also see [[Animation-CobConstants#Custom_Variables|Custom_Variables]].\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitCOBValue\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|number}} COBValue\n|arg3 = {{type|number}} param1 {{bracket}}\n|arg4 = {{type|number}} param2 {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Note: Don't use Spring.{{bracket}}Get{{pipe}}Set{{rbracket}}UnitCOBValue in LUS just because you are familar with it since bos/cob, use the LuaSpringAPI instead!<br>You can find the possible values for `COBValue` in [[Lua_ConstCOB#Get.2FSet|Lua_ConstCOB]]. Also see [[Animation-CobConstants#Custom_Variables|Custom_Variables]].\n}}\n\n= Give Order =\n\nOptions can also be a bitmask; e.g. 0 instead of an empty table (can avoid performance hit on table creation)<br>\nSee [[Lua CMDs]] for relevant constants.\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GiveOrderToUnit\n|arg1 = {{type|number}} unitID \n|arg2 = {{type|number}} cmdID\n|arg3 = params = { number, etc...}\n|arg4 = options = {\"alt\", \"ctrl\", \"shift\", \"right\"}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GiveOrderToUnitMap\n|arg1 = unitMap = { {{bracket}}unitID{{rbracket}} = example, etc... }\n|arg2 = {{type|number}} cmdID\n|arg3 = params = { number, etc...}\n|arg4 = options = {\"alt\", \"ctrl\", \"shift\", \"right\"}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GiveOrderToUnitArray\n|arg1 = unitArray = { {{bracket}}1{{rbracket}} = unitID, etc... }\n|arg2 = {{type|number}} cmdID\n|arg3 = params = { number, etc...}\n|arg4 = options = {\"alt\", \"ctrl\", \"shift\", \"right\"}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GiveOrderArrayToUnitMap\n|arg1 = unitMap = { {{bracket}}{{type|number}} unitID{{rbracket}} = example, etc... }\n|arg2 = orderArray = { { {{type|number}} cmdID, params = { number, etc...}, options = {\"alt\", \"ctrl\", \"shift\", \"right\"} } }\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = GiveOrderArrayToUnitArray\n|arg1 = unitArray = { {{bracket}}1{{rbracket}} = {{type|number}} unitID, etc... }\n|arg2 = orderArray = { { {{type|number}} cmdID, params = { number, etc...}, options = {\"alt\", \"ctrl\", \"shift\", \"right\"} } }\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n=Ground=\n== Grass ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddGrass\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = RemoveGrass\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n== Heightmap ==\n<span class=\"note\">Note that x & z coords are in worldspace (Game.mapSizeX/Z), still the heightmap resolution is [[Lua_ConstGame|Game.squareSize]].</span>\n\n{{LuaCallout\n|prefix = Spring.\n|name = LevelHeightMap\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} height\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AdjustHeightMap\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} height\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = (heightmap[x][z] += height;)\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = RevertHeightMap\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} origFactor \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetHeightMapFunc\n|arg1 = lua_function {{bracket}}\n|arg2 = arg1 {{bracket}}\n|arg3 = arg2 {{bracket}}\n|arg4 = ... {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} absTotalHeightMapAmountChanged\n|info = \n}}\nExample code:<pre>\nSpring.SetHeightMapFunc(function()\n\tfor z=0,Game.mapSizeZ, Game.squareSize do\n\t\tfor x=0,Game.mapSizeX, Game.squareSize do\n\t\t\tSpring.SetHeightMap( x, z, 200 + 20 * math.cos((x + z) / 90) )\n\t\tend\n\tend\nend)</pre>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddHeightMap\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} height\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} newHeight\n|info = Can only be called in SetHeightMapFunc()\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetHeightMap\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} height {{bracket}}\n|arg4 = {{type|number}} terraform = 1 {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} absHeightDiff\n|info = Can only be called in SetHeightMapFunc(). The terraform argument is a scaling factor:<br>\nIf =0 nothing will be changed (the terraform starts) and if =1 the terraform will be finished.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = LevelSmoothMesh\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} height \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AdjustSmoothMesh\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} height \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = RevertSmoothMesh\n|arg1 = {{type|number}} x1\n|arg2 = {{type|number}} z1 {{bracket}}\n|arg3 = {{type|number}} x2 \n|arg4 = {{type|number}} z2 {{rbracket}}\n|arg5 = {{type|number}} origFactor \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetSmoothMeshFunc\n|arg1 = lua_function {{bracket}}\n|arg2 = arg1 {{bracket}}\n|arg3 = arg2 {{bracket}}\n|arg4 = ... {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} absTotalHeightMapAmountChanged\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = AddSmoothMesh\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} height\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} newHeight\n|info = Can only be called in SetSmoothMeshFunc().\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetSmoothMesh\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} height {{bracket}}\n|arg4 = {{type|number}} terraform = 1 {{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} absHeightDiff\n|info = Can only be called in SetSmoothMeshFunc().\n}}\n\n== TerrainTypes ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetMapSquareTerrainType\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} newType\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} oldType\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetTerrainTypeData\n|arg1 = {{type|number}} typeIndex {{bracket}}\n|arg2 = {{type|number}} speedTanks = nil {{bracket}}\n|arg3 = {{type|number}} speedKBOts = nil {{bracket}}\n|arg4 = {{type|number}} speedHovers = nil {{bracket}}\n|arg5 = {{type|number}} speedShips = nil {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} true\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetSquareBuildingMask\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} mask \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|103.0}}\n}}\n\nSee also {{xtaglink|Gamedev:UnitDefs|buildingMask}} unitdef tag.\n\n== MetalAmount ==\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetMetalAmount\n|arg1 = {{type|number}} x\n|arg2 = {{type|number}} z\n|arg3 = {{type|number}} metalAmount\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|83.0}}<br>x & z coords are in worldspace/16. metalAmount must be between 0 and 255*maxMetal (with maxMetal from the .smd or mapinfo.lua).\n}}\n\n= Command Descriptions =\n<font color=\"red\" style=\"font-size:120%; font-weight:600\">Doesn't work in unsynced code!</font><br><br>\n\n{{LuaCallout\n|prefix = Spring.\n|name = EditUnitCmdDesc\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} cmdDescID\n|arg3 = {{type|table}} cmdArray \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n<pre>structure of cmdArray:\n  {\n    [ id          = int ],\n    [ type        = int ],\n    [ name        = string ],\n    [ action      = string ],\n    [ tooltip     = string ],\n    [ texture     = string ],\n    [ cursor      = string ],\n    [ queueing    = boolean ],\n    [ hidden      = boolean ],\n    [ disabled    = boolean ],\n    [ showUnique  = boolean ],\n    [ onlyTexture = boolean ],\n    [ params      = { string = string, ... } ]\n  }</pre>\n{{var|queueing}} is {{new|101.0}} and allows custom commands to be non-queueing (handy for state toggles).\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = InsertUnitCmdDesc\n|arg1 = {{type|number}} unitID {{bracket}}\n|arg2 = {{type|number}} cmdDescID {{rbracket}}\n|arg3 = {{type|table}} cmdArray \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = RemoveUnitCmdDesc\n|arg1 = {{type|number}} unitID {{bracket}}\n|arg2 = {{type|number}} cmdDescID {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n= Other =\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetNoPause\n|arg1 = {{type|bool}} noPause \n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetUnitToFeature\n|arg1 = {{type|bool}} tofeature \n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = An ugly global switch that can be used to block units turning into features when they finish being built (like *A DT's do, which have the isFeature tag) [http://springrts.com/phpbb/viewtopic.php?f=14&p=481521 thread]\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetExperienceGrade\n|arg1 = {{type|number}} expGrade {{bracket}}\n|arg2 = {{type|number}} ExpPowerScale {{bracket}}\n|arg3 = {{type|number}} ExpHealthScale {{bracket}}\n|arg4 = {{type|number}} ExpReloadScale {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = expGrade defines how often UnitExperience() will be called.<br>Prior to 104.0 it is based on the following equation:<br>(int) {{bracket}}exp/(exp+1){{rbracket}} / expGrade<br><br>Post 104.0 it is the raw change.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SpawnExplosion\n|arg1 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0\n|arg2 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0\n|arg3 = {{type|table}} explosionParams\n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|104.0}}\n}}\n  <pre>Possible keys of explosionParams are:\n    weaponDef = number,\n    owner = number,\n    hitUnit = number,\n    hitFeature = number,\n    craterAreaOfEffect = number,\n    damageAreaOfEffect = number,\n    edgeEffectiveness = number,\n    explosionSpeed = number,\n    gfxMod = number,\n    impactOnly = boolean,\n    ignoreOwner = boolean,\n    damageGround = boolean\n\nPlease note the explosion defaults to 1 damage regardless of what it's defined in the weaponDef.\nThe weapondefID is only used for visuals and for passing into callins like UnitDamaged.</pre>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SpawnCEG\n|arg1 = {{type|string}} \"cegname\" | {{type|number}} cegID\n|arg2 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0\n|arg3 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0\n|arg4 = {{type|number}} radius = 0\n|arg5 = {{type|number}} damage = 0\n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} success, {{type|number}} cegID\n|info = cegID new in 95.0.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SpawnSFX\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} sfxID\n|arg3 = {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0\n|arg4 = {{type|number}} dirX = 0, {{type|number}} dirY = 0, {{type|number}} dirZ = 0\n|arg5 = {{type|number}} radius = 0\n|arg6 = {{type|number}} damage = 0 {{bracket}}\n|arg7 = {{type|bool}} absolute {{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} success\n|info = {{new|104.0}}\n}}\n\nEqual to the [[Animation-LuaCallouts#Effects|UnitScript versions of EmitSFX]], but takes position and direction arguments (in either unit- or piece-space) instead of a piece index.\n\n= Projectiles =\n\n{{LuaCallout\n|prefix = Spring.\n|name = SpawnProjectile\n|arg1 = {{type|number}} weaponDefID\n|arg2 = {{type|table}} projectileParams \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|number}} projectileID\n|info = \n}}\n  <pre>Possible keys of projectileParams are:\n    pos = {number x, number y, number z},\n    end = {number x, number y, number z},\n    speed = {number x, number y, number z},\n    spread = {number x, number y, number z},\n    error = {number x, number y, number z},\n    owner = number,\n    team = number,\n    ttl = number,\n    gravity = number,\n    tracking = number,\n    maxRange = number,\n    startAlpha = number,\n    endAlpha = number,\n    model = string,\n    cegTag = string</pre>\n\n{{LuaCallout\n|prefix = Spring.\n|name = DeleteProjectile\n|arg1 = {{type|number}} projectileID\n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}<br>Silently removes projectiles (no explosion).\n}}\n\n\n<span class = \"warning\">Pre 95.0:</span>\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileTarget\n|arg1 = {{type|number}} projectileID \n|arg2 = {{bracket}} {{type|number}} targetID, {{type|string}} targetTypeStr {{rbracket}} {{pipe}} {{bracket}} {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0 {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} validTarget\n|info = \n}}\n\n<span class = \"warning\">Post 95.0:</span>\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileTarget\n|arg1 = {{type|number}} projectileID \n|arg2 = {{bracket}} {{type|number}} targetID, {{type|number}} targetType {{rbracket}} {{pipe}} {{bracket}} {{type|number}} posX = 0, {{type|number}} posY = 0, {{type|number}} posZ = 0 {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}} {{pipe}} {{type|bool}} validTarget\n|info = \n}}\n  <pre>targetTypeStr can be one of: \n    'u' - unit\n    'f' - feature\n    'p' - projectile\n  while targetTypeInt is one of:\n    string.byte('g') := GROUND\n    string.byte('u') := UNIT\n    string.byte('f') := FEATURE\n    string.byte('p') := PROJECTILE</pre>\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileIgnoreTrackingError\n|arg1 = {{type|number}} projectileID \n|arg2 = {{type|bool}} ignore \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileIsIntercepted\n|arg1 = {{type|number}} projectileID \n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|99.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileMoveControl\n|arg1 = {{type|number}} projectileID \n|arg2 = {{type|bool}} enable\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = Disables engine movecontrol, so lua can fully control the physics.\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectilePosition\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} posX = 0 {{bracket}}\n|arg3 = {{type|number}} posY = 0 {{bracket}}\n|arg4 = {{type|number}} posZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileVelocity\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} velX = 0 {{bracket}}\n|arg3 = {{type|number}} velY = 0 {{bracket}}\n|arg4 = {{type|number}} velZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileCollision\n|arg1 = {{type|number}} projectileID\n|arg2 = \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileGravity\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} grav = 0 {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileSpinAngle\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} spinAngle = 0 {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|95.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileSpinSpeed\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} speed = 0 {{rbracket}}\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|95.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileSpinVec\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} spinX = 0 {{bracket}}\n|arg3 = {{type|number}} spinY = 0 {{bracket}}\n|arg4 = {{type|number}} spinZ = 0 {{rbracket}}{{rbracket}}{{rbracket}}\n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{removed|95.0}}\n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileCEG\n|arg1 = {{type|number}} projectileID\n|arg2 = {{type|string}} ceg_name \n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info =\n}}\n\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetPieceProjectileParams\n|arg1 = {{type|number}} projectileID {{bracket}}\n|arg2 = {{type|number}} explosionFlags {{bracket}}\n|arg3 = {{type|number}} spinAngle {{bracket}}\n|arg4 = {{type|number}} spinSpeed {{bracket}}\n|arg5 = {{type|number}} spinVector.x {{bracket}}\n|arg6 = {{type|number}} spinVector.y {{bracket}}\n|arg7 = {{type|number}} spinVector.z {{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}{{rbracket}}\n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|95.0}} \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileAlwaysVisible\n|arg1 = {{type|number}} projectileID\n|arg2 = {{type|bool}} alwaysVisible\n|arg3 = \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|95.0}} \n}}\n\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileDamages\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum\n|arg3 = {{type|table}} damages \n|arg4 = \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = \n}}\n\nor\n\n{{LuaCallout\n|prefix = Spring.\n|name = SetProjectileDamages\n|arg1 = {{type|number}} unitID\n|arg2 = {{type|number}} weaponNum\n|arg3 = {{type|string}} key\n|arg4 = {{type|number}} value \n|arg5 = \n|arg6 = \n|arg7 = \n|arg8 = \n|arg9 = \n|return = {{type|nil}}\n|info = {{new|101.0}}\n}}\n<pre>Format of the damages table:\n   {\n      [\"paralyzeDamageTime\" = number value,]  \n      [\"impulseFactor\"      = number value,]\n      [\"impulseBoost\"       = number value,]\n      [\"craterMult\"         = number value,]\n      [\"craterBoost\"        = number value,]\n      [\"dynDamageExp\"       = number value,]\n      [\"dynDamageMin\"       = number value,]\n      [\"dynDamageRange\"     = number value,]\n      [\"dynDamageInverted\"  = number value,] (<>0.0f := true)\n      [\"craterAreaOfEffect\" = number value,]\n      [\"damageAreaOfEffect\" = number value,]\n      [\"edgeEffectiveness\"  = number value,]\n      [\"explosionSpeed\"     = number value,]\n      [number armorType     = number value,] (changes the damage against this armor type)\n    }</pre>\n\n[[category: Lua]]",
                        "contentformat": "text/x-wiki",
                        "contentmodel": "wikitext"
                    }
                ],
                "title": "Lua SyncedCtrl"
            }
        ]
    },
    "warnings": {
        "main": {
            "warnings": "Subscribe to the mediawiki-api-announce mailing list at <https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce> for notice of API deprecations and breaking changes."
        },
        "revisions": {
            "warnings": "Because \"rvslots\" was not specified, a legacy format has been used for the output. This format is deprecated, and in the future the new format will always be used."
        }
    }
}